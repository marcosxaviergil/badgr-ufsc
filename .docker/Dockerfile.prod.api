# =============================================================================
# EST√ÅGIO 1: Builder - Compila√ß√£o das depend√™ncias
# =============================================================================
FROM python:3.8-slim as builder

ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8
ENV PYTHONIOENCODING=UTF-8

WORKDIR /build

# Instalar depend√™ncias de compila√ß√£o
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        build-essential \
        default-libmysqlclient-dev \
        libjpeg-dev \
        zlib1g-dev \
        libfreetype6-dev \
        libffi-dev \
        libcairo2-dev \
        libxml2-dev \
        libxslt1-dev \
        libssl-dev \
        python3-dev \
        locales \
        pkg-config && \
    locale-gen en_US.UTF-8 && \
    rm -rf /var/lib/apt/lists/*

# Copiar e instalar depend√™ncias Python
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# =============================================================================
# EST√ÅGIO 2: Produ√ß√£o - Imagem final otimizada
# =============================================================================
FROM python:3.8-slim

ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8
ENV PYTHONIOENCODING=UTF-8

# ‚úÖ CORRE√á√ÉO PRINCIPAL: Instalar TODAS as depend√™ncias de runtime
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        bash \
        locales \
        libmariadb3 \
        libmariadb-dev-compat \
        default-libmysqlclient-dev \
        libjpeg62-turbo \
        libfreetype6 \
        libpng16-16 \
        libcairo2 \
        libcairo-gobject2 \
        libpango-1.0-0 \
        libpangocairo-1.0-0 \
        libgdk-pixbuf-2.0-0 \
        libpcre3 \
        libyaml-0-2 \
        libjansson4 \
        xmlsec1 \
        libxml2 \
        libxslt1.1 \
        libxmlsec1 \
        libxmlsec1-openssl \
        libssl3 \
        libffi8 \
        libffi-dev \
        libssl-dev \
        zlib1g-dev \
        libjpeg-dev \
        nano \
        curl \
        netcat-openbsd && \
    locale-gen en_US.UTF-8 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    mkdir /badgr_server

WORKDIR /badgr_server

# ‚úÖ CORRE√á√ÉO: Copiar bibliotecas Python E bin√°rios
COPY --from=builder /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# ‚úÖ CORRE√á√ÉO: Copiar tamb√©m bibliotecas compartilhadas se necess√°rio
COPY --from=builder /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/

# Copiar arquivos da aplica√ß√£o
COPY manage.py /badgr_server/
COPY .docker/etc/uwsgi.ini /badgr_server/
COPY .docker/etc/wsgi.py /badgr_server/wsgi.py
COPY apps /badgr_server/apps/
COPY .docker/etc/settings_local.prod.py /badgr_server/apps/mainsite/settings_local.py
COPY .docker/init/init_django.sh /badgr_server/init_django.sh

# ‚úÖ Teste mais espec√≠fico para debugging
RUN chmod +x /badgr_server/init_django.sh && \
    echo "üß™ Verificando instala√ß√£o Python..." && \
    python3 --version && \
    echo "üß™ Verificando bibliotecas..." && \
    python3 -c "import sys; print('Python path:', sys.path)" && \
    echo "üß™ Testando MySQLclient..." && \
    python3 -c "import MySQLdb; print('‚úÖ MySQLdb OK')" && \
    echo "üß™ Testando Pillow..." && \
    python3 -c "import PIL; print('‚úÖ Pillow OK')" && \
    echo "üß™ Testando Cairo..." && \
    python3 -c "import cairocffi; print('‚úÖ cairocffi OK')" && \
    echo "üß™ Testando uWSGI..." && \
    python3 -c "import uwsgi; print('‚úÖ uWSGI OK')" && \
    echo "üéâ Todas as bibliotecas funcionam!"

EXPOSE 8911

CMD ["./init_django.sh"]
