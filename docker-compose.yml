# docker-compose.yml

version: '3.8'

services:
  api:
    image: registry.setic.ufsc.br/marcosxavier/badgr-deploy/server:master
    tty: true
    stdin_open: true
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == prod-r2-no4
      restart_policy:
        condition: on-failure
    environment:
      - LANG=C.UTF-8
      - LC_ALL=C.UTF-8
      - PYTHONIOENCODING=utf-8
      - PYTHONPATH=/badgr_server/apps
      - AUTHCODE_SECRET_KEY=ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM92s=
      - BADGR_DB_HOST=db
      - BADGR_DB_NAME=badgr
      - BADGR_DB_USER=badgr
      - BADGR_DB_PASSWORD=${BADGR_DB_PASSWORD}
      - BADGR_DB_PORT=3306
      - DJANGO_SETTINGS_MODULE=mainsite.settings_local
      - DEBUG=0
      - ALLOWED_HOSTS=api-badges.setic.ufsc.br,badges.setic.ufsc.br,localhost
      - HTTP_ORIGIN=${HTTP_ORIGIN}
      - UFSC_OAUTH2_CLIENT_ID=edx-badges
      - UFSC_OAUTH2_CLIENT_SECRET=sdf46sdfgsddfg
      - UI_URL=https://badges.setic.ufsc.br
      - SECRET_KEY=${SECRET_KEY}

    volumes:
      - static_files:/badgr_server/staticfiles
      - media_files:/badgr_server/mediafiles

    networks:
      - shared-network

    depends_on:
      - db

    ports:
      - "8911:8911"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8911/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ui:
    image: registry.setic.ufsc.br/marcosxavier/badgr-deploy/ui:master
    tty: true
    stdin_open: true
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == prod-r2-no4
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    environment:
      - NODE_ENV=production
      - PORT=80
      - HOSTNAME=${HOSTNAME}
      - API_BASE_URL=${API_BASE_URL:-https://api-badges.setic.ufsc.br}
      - BADGR_SOCIAL_PROVIDERS=${BADGR_SOCIAL_PROVIDERS:-ufsc}
      - LANG=C.UTF-8
      - LC_ALL=C.UTF-8

    volumes:
      - ui_files:/app
    networks:
      - shared-network
    ports:
      - "8915:80"

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    depends_on:
      - api

  db:
    image: mysql:5.7
    tty: true
    stdin_open: true
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == prod-r2-no4
          - node.role == manager
    environment:
      - MYSQL_ROOT_PASSWORD=${BADGR_DB_PASSWORD}
      - MYSQL_DATABASE=badgr
      - MYSQL_USER=badgr
      - MYSQL_PASSWORD=${BADGR_DB_PASSWORD}
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci

    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password

    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${BADGR_DB_PASSWORD}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - shared-network
    ports:
      - "8913:3306"

  memcached:
    image: memcached:alpine
    tty: true
    stdin_open: true
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == prod-r2-no4
    networks:
      - shared-network

    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "11211"]
      interval: 30s
      timeout: 10s
      retries: 3

  mailhog:
    image: mailhog/mailhog
    tty: true
    stdin_open: true
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == prod-r2-no4
    ports:
      - "8025:8025"
    networks:
      - shared-network

    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8025 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  shared-network:
    driver: overlay
    attachable: true

volumes:
  db_data:
    driver: local
  static_files:
    driver: local
  media_files:
    driver: local
  ui_files:
    driver: local
  redis_data:
    driver: local